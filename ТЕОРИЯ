
пропись вложенных классов
.container {
  &__item {    //это класс .container__item, дочка в .container
  }
  &.show {     //это класс .container .show
  }
}


....................................................
наследование класса
.font48 {
  font-style: normal;
  font-weight: bold;
  font-size: rem(48);
  line-height: rem(57);
  color: #000000;
}

%font-center {                 //ни где не используемый класс-заготовка
  display: flex;
  align-items: center;
  justify-content: center;
}

.title {
  margin-top: 40px;
  @extend .font48;
  @extend %font-center;
}

...................................................
декларация @media 

.is-mobile {
  @media (min-width: 1020px) {
    display: none;
  }
}

....................................................
ГЕНЕРАЦИЯ КЛАССОВ-ДОЧЕК В CSS с небольшой разницей между ними

<div class="cleaners">
   <div v-for="(cleaner, index) in 4" :key="index" class="cleaner">
     goooooo
   </div>
</div>


  .cleaners {
    display: grid;

    .cleaner {
      position: relative;
      opacity: 0;
      transform: translateY(-30px);
    }
  }

  @mixin tr-reset() {
    opacity: 1;
    transform: translate(0, 0);
  }

  .cleaners {
    @for $i from 1 through 6 {
      .cleaner:nth-child(#{$i}) {
        @include tr-reset();           //reset каждый цикл(!)
        transition: opacity linear .5s, transform  linear .5s*;
        transition-delay: ($base-delay + $i * $base-delay);
      }
    }
  }


Генерация CSS-классов с помлщью цикла

.show {
  @for $i from 0 through 10 {
    #checkbox_#{$i} {
      width: 10px;
      height: 10px;
      @include transition-reset();
      transition: trns($appear, opacity, transform);
      transition-delay: ($base-delay + $i * $base-delay);
    }
    .review:nth-child(#{$i}) {
      border: red 1px solid;
    }
  }
}


....................................................
ПЕРЕМЕННЫЕ
$primary: #DD3D3D;
$myPadding: 20px;

2 значения в переменной одновременно, списковая переменная
$appear: 0.5s linear;

.title {
  color: $primary;                   //использование переменной
  transition: opacity $appear;
  padding: $myPadding + 30;          //математические вычисления В ОТКРЫТУЮ, добавлять "px" не нужно, т.к. оно прописано в значении переменной $myPadding.
  $myColor: red !global;             //переменная, заявленная локально, будет видна везде, а не только внутри скобок.
}

В SASS существует шесть разных типов переменных:
Строковые  $myString: “здесь ваш текст”;
Числовые   $myNum: 10px;
Цветовые   $myColor: white;
Логические $myBool: true;
Списковые  $myItemList: 1px solid red;
Тип null   $myVar: null;



//Переменная varFromCSS для последующего ее ИСПОЛЬЗОВАНИЯ в JS.

// variables.scss
$mainColor: red;
:export {      // :export подчеркивается в webStorm'e красным, но это надо игнорировать.
  colorFromCSS:  $mainColor;
}


//
import variables from 'variables.scss'

<div style={backgroundColor: myColor}>

computed: {
  myColor() {
    return variables.colorFromCSS
  }
}



...................................................
МИКСИНЫ
-набор свойств, но значения у этих свойств - поступают как аргументы миксина
-выдают СТИЛЬ

@mixin fz($nn) {
  font-size: #{($nn / 16)}rem;
}

@mixin transform-reset() {
  opacity: 1;
  transform: translate(0, 0);
}
@mixin transform-reset {
  opacity: 1;
  transform: translate(0, 0);
}

использование
.title {
  @include fz(8)
  @include transform-reset()
  @include transform-reset
}


....................................................
ФУНКЦИИ
-выдают ЗНАЧЕНИЕ

1)
$generalFontSize_number: 16;

@function rem($n) {
  @return #{($n / $generalFontSize_number)}rem;
}


2)
@function trns($h, $s...) {
  $f: '';
  @each $t in $s {
    $f: $f + $t + ' ' + $h + ', ';
  }
  @return #{$f};
}

.clean {
  transition: trns(.5s, opacity, transform);
}

==>>
/*эта функция выдаст:*/
/*opacity linear .5s*/
/*transform  linear .5s*/


3)ПРОЦЕНТЫ в scss
$my_width: percentage(4/12);
или
$my_width: 4/12*100%;

div{
width: $my_width;
}

..............................

СТАНДАРТНЫЕ ЦВЕТОВЫЕ ФУНКЦИИ
darken(color, amount);
lighten(color, amount);
saturate(color, amount);     //Насыщение
desaturate(color, amount);
alpha(color)

$myColor: #202020;
color: lighten($myColor, 40%); //затемнение цвета на 40%







